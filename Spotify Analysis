# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Who are the top 10 artists based on popularity?

SELECT artist_name, popularity
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#2. What artist released the longest song?

SELECT artist_name, MAX(duration_ms) AS song_length
FROM Spotifydata;

#3. What's the average danceability for the 10 most popular songs?

SELECT track_name, AVG(danceability) AS average_danceability
FROM Spotifydata
GROUP BY track_name
ORDER BY popularity desc
LIMIT 10;

#4. Which artists have multiple songs in the Top 50? 

SELECT COUNT(*) AS Num_Songs, artist_name
FROM Spotifydata
GROUP BY artist_name
HAVING Num_Songs >1
ORDER BY Num_Songs DESC; 

#5. What is the average duration of songs in the dataset?

SELECT AVG(duration_ms) AS avg_duration
FROM Spotifydata; 

#6. What is the longest song with the most liveness? 

SELECT track_name, duration_ms, MAX(liveness) AS liveness
FROM Spotifydata
GROUP BY liveness 
ORDER BY liveness desc
LIMIT 1; 

#7. Which songs have the highest danceability?

SELECT track_name, danceability
FROM Spotifydata
ORDER BY danceability desc; 
